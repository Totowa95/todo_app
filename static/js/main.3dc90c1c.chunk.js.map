{"version":3,"sources":["components/TodoApp.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","App.js","index.js"],"names":["TodoApp","getTodo","useState","todo","setTodo","onSubmit","event","preventDefault","length","Date","trim","type","className","placeholder","value","onChange","target","trimLeft","TodoItem","complete","onDelete","todoWasEdited","title","currentTodo","setCurrentTodo","newTodo","setEditigTodo","editing","setEditing","classNames","completed","checked","id","onDoubleClick","onClick","autoFocus","onBlur","onKeyDown","key","TodoList","todos","changeCompleted","deleteTodo","editingTodo","map","item","TodosFilter","todosLeft","showTodos","clearCompleted","completedTodos","selectedFilter","setSelectedFilter","href","selected","App","setTodos","filterBy","setFilterBy","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","filteredTodos","useMemo","filter","every","readOnly","htmlFor","newTitle","some","ReactDOM","render","document","getElementById"],"mappings":"0RAGaA,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,KAGtC,OACE,0BACEC,SAAU,SAACC,GACTA,EAAMC,iBAEFJ,EAAKK,OAAS,IAChBP,GAAS,IAAIQ,KAAQN,EAAKO,QAC1BN,EAAQ,OAMZ,2BACEO,KAAK,OACLC,UAAU,WACVC,YAAY,yBACZC,MAAOX,EACPY,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBZ,EAAQY,EAAOF,MAAMG,iB,gBCpB1CC,EAAW,SAAC,GAAiD,IAA/Cf,EAA8C,EAA9CA,KAAMgB,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAAoB,EACjCnB,mBAASC,EAAKmB,OADmB,mBAChEC,EADgE,KACnDC,EADmD,OAEtCtB,mBAASqB,GAF6B,mBAEhEE,EAFgE,KAEvDC,EAFuD,OAGzCxB,oBAAS,GAHgC,mBAGhEyB,EAHgE,KAGvDC,EAHuD,KAKvE,OACE,wBAAIhB,UAAWiB,IAAW,CACxBC,UAAW3B,EAAK2B,UAChBH,aAGA,yBAAKf,UAAU,QACb,2BACED,KAAK,WACLC,UAAU,SACVmB,QAAS5B,EAAK2B,UACdf,SAAU,WACRI,EAAShB,EAAK6B,OAGlB,2BAAOC,cAAe,kBAAML,GAAW,KACpCL,GAEH,4BACEZ,KAAK,SACLC,UAAU,UACVsB,QAAS,WACPd,EAASjB,EAAK6B,QAInBL,GACC,2BACEhB,KAAK,OACLC,UAAU,OACVuB,WAAS,EACTrB,MAAOW,EACPW,OAAQ,kBAAMR,GAAW,IACzBb,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXU,EAAcV,EAAOF,QAEvBuB,UAAW,SAAC/B,GACV,OAAQA,EAAMgC,KACZ,IAAK,QACH,OAAIb,GACFJ,EAAclB,EAAK6B,GAAIP,GACvBD,EAAeC,QACfG,GAAW,KAKbR,EAASjB,EAAK6B,SACdJ,GAAW,IAIb,IAAK,SACHF,EAAcH,GACdK,GAAW,SC1DdW,EAAW,SAAC,GAKlB,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,WACAC,EACI,EADJA,YAEMxB,EAAW,SAACa,GAChBS,EAAgBT,IAGZX,EAAgB,SAACW,EAAIP,GACzBkB,EAAYX,EAAIP,IAGlB,OACE,wBAAIb,UAAU,aACX4B,EAAMI,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,CACE1C,KAAM0C,EACNP,IAAKO,EAAKb,GACVb,SAAUA,EACVC,SAAUsB,EACVrB,cAAeA,SCvBZyB,EAAc,SAAC,GAKrB,IAJLC,EAII,EAJJA,UACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,eACAC,EACI,EADJA,eACI,EACwChD,mBAAS,OADjD,mBACGiD,EADH,KACmBC,EADnB,KAGJ,OACE,4BAAQxC,UAAU,UAChB,0BAAMA,UAAU,cAEZ,UACKmC,EADQ,IAAZA,EAAD,6BAMJ,wBAAInC,UAAU,WACZ,4BACE,uBACEyC,KAAK,KACLzC,UAAWiB,IAAW,CACpByB,SAA6B,QAAnBH,IAEZjB,QAAS,SAAC5B,GACRA,EAAMC,iBACN6C,EAAkB,OAClBJ,EAAU,SARd,QAeF,4BACE,uBACEK,KAAK,WACLzC,UAAWiB,IAAW,CACpByB,SAA6B,WAAnBH,IAEZjB,QAAS,SAAC5B,GACRA,EAAMC,iBACN6C,EAAkB,UAClBJ,GAAU,KARd,WAeF,4BACE,uBACEK,KAAK,cACLzC,UAAWiB,IAAW,CACpByB,SAA6B,cAAnBH,IAEZjB,QAAS,SAAC5B,GACRA,EAAMC,iBACN6C,EAAkB,aAClBJ,GAAU,KARd,eAgBJ,4BACErC,KAAK,SACLC,UAAWiB,IAAW,CACpB,mBAAmB,EACnB,oBAAqBqB,IAEvBhB,QAAS,kBAAMe,MANjB,qBCuCSM,MA1Gf,WAAgB,IAAD,EACarD,mBAAS,IADtB,mBACNsC,EADM,KACCgB,EADD,OAEmBtD,mBAAS,OAF5B,mBAENuD,EAFM,KAEIC,EAFJ,KAIbC,qBAAU,WAC6B,OAAjCC,aAAaC,QAAQ,SACvBL,EAASM,KAAKC,MAAMH,aAAaC,QAAQ,YAE1C,IAEHF,qBAAU,WACRC,aAAaI,QAAQ,OAAQF,KAAKG,UAAUzB,MAC3C,CAACA,IAEJ,IAAM0B,EAAgBC,mBAAQ,kBAAM3B,EAAM4B,QAAO,SAAAjE,GAAI,MAAmB,QAAbsD,EACvDtD,EACAA,EAAK2B,YAAc2B,OAAY,CAACA,EAAUjB,IAwC9C,OACE,6BAAS5B,UAAU,WACjB,4BAAQA,UAAU,UAChB,yCAEA,kBAAC,EAAD,CAASX,QA3CC,SAAC+B,EAAIV,GAA8B,IAAvBQ,EAAsB,wDAChD0B,EAAS,GAAD,mBAAKhB,GAAL,CAAY,CAClBR,KACAV,QACAQ,oBA0CA,6BAASlB,UAAU,QACjB,2BACED,KAAK,WACLqB,GAAG,aACHpB,UAAU,aACVmB,QAASS,EAAMhC,OAAS,GAAKgC,EAAM6B,OAAM,SAAAlE,GAAI,OAAIA,EAAK2B,aACtDI,QAAS,WAvBXM,EAAMhC,QAAUgC,EAAM6B,OAAM,SAAAlE,GAAI,OAAIA,EAAK2B,aAC3C0B,EAAShB,EAAMI,KAAI,SAAAzC,GAAI,kCAAUA,GAAV,IAAgB2B,WAAW,QAKpD0B,EAAShB,EAAMI,KAAI,SAAAzC,GAAI,kCAAUA,GAAV,IAAgB2B,WAAW,SAkB5CwC,UAAQ,IAEV,2BACEC,QAAQ,cADV,wBAMA,kBAAC,EAAD,CACE/B,MAAO0B,EACPzB,gBAjDgB,SAACT,GACvBwB,EAAShB,EAAMI,KAAI,SAAAzC,GAAI,OAAMA,EAAK6B,KAAOA,EAAb,YAAC,eACpB7B,GADmB,IACb2B,WAAY3B,EAAK2B,YAC5B3B,OA+CEuC,WA5CW,SAACV,GAClBwB,EAAShB,EAAM4B,QAAO,SAAAjE,GAAI,OAAIA,EAAK6B,KAAOA,OA4CpCW,YAzDY,SAACX,EAAIwC,GACvBhB,EAAShB,EAAMI,KAAI,SAAAzC,GAAI,OAAKA,EAAK6B,KAAOA,EAAZ,2BAClB7B,GADkB,IACZmB,MAAOkD,IADK,eAElBrE,YA2DLqC,EAAMhC,QAEL,kBAAC,EAAD,CACEuC,UACEP,EACG4B,QAAO,SAAAjE,GAAI,OAAuB,IAAnBA,EAAK2B,aACpBtB,OAELwC,UAAWU,EACXT,eAvDa,WACrBO,EAAShB,EAAM4B,QAAO,SAAAjE,GAAI,OAAuB,IAAnBA,EAAK2B,eAuD3BoB,eAAgBV,EAAMiC,MAAK,SAAAtE,GAAI,OAAIA,EAAK2B,iBC9FpD4C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.3dc90c1c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoApp = ({ getTodo }) => {\n  const [todo, setTodo] = useState('');\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        if (todo.length > 0) {\n          getTodo(+new Date(), todo.trim());\n          setTodo('');\n        }\n\n        return;\n      }}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={todo}\n        onChange={({ target }) => setTodo(target.value.trimLeft())}\n      />\n    </form>\n  );\n};\n\nTodoApp.propTypes = {\n  getTodo: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({ todo, complete, onDelete, todoWasEdited }) => {\n  const [currentTodo, setCurrentTodo] = useState(todo.title);\n  const [newTodo, setEditigTodo] = useState(currentTodo);\n  const [editing, setEditing] = useState(false);\n\n  return (\n    <li className={classNames({\n      completed: todo.completed,\n      editing,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={() => {\n            complete(todo.id);\n          }}\n        />\n        <label onDoubleClick={() => setEditing(true)}>\n          {currentTodo}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            onDelete(todo.id);\n          }}\n        />\n      </div>\n      {editing && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          autoFocus\n          value={newTodo}\n          onBlur={() => setEditing(false)}\n          onChange={({ target }) => {\n            setEditigTodo(target.value);\n          }}\n          onKeyDown={(event) => {\n            switch (event.key) {\n              case 'Enter':\n                if (newTodo) {\n                  todoWasEdited(todo.id, newTodo);\n                  setCurrentTodo(newTodo);\n                  setEditing(false);\n\n                  return;\n                }\n\n                onDelete(todo.id);\n                setEditing(false);\n\n                return;\n\n              case 'Escape':\n                setEditigTodo(currentTodo);\n                setEditing(false);\n                break;\n\n              default:\n            }\n          }}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  complete: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  todoWasEdited: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes, { object } from 'prop-types';\n\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = ({\n  todos,\n  changeCompleted,\n  deleteTodo,\n  editingTodo,\n}) => {\n  const complete = (id) => {\n    changeCompleted(id);\n  };\n\n  const todoWasEdited = (id, newTodo) => {\n    editingTodo(id, newTodo);\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.map(item => (\n        <TodoItem\n          todo={item}\n          key={item.id}\n          complete={complete}\n          onDelete={deleteTodo}\n          todoWasEdited={todoWasEdited}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(object).isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editingTodo: PropTypes.func.isRequired,\n};\n","import React, { useState }from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodosFilter = ({\n  todosLeft,\n  showTodos,\n  clearCompleted,\n  completedTodos,\n}) => {\n  const [selectedFilter, setSelectedFilter] = useState('All');\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {\n          (todosLeft===1)\n          ? `${todosLeft} item left`\n          : `${todosLeft} items left`\n        }\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({\n              selected: selectedFilter === 'All',\n            })}\n            onClick={(event) => {\n              event.preventDefault();\n              setSelectedFilter('All');\n              showTodos('all');\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={classNames({\n              selected: selectedFilter === 'Active',\n            })}\n            onClick={(event) => {\n              event.preventDefault();\n              setSelectedFilter('Active');\n              showTodos(false);\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={classNames({\n              selected: selectedFilter === 'Completed',\n            })}\n            onClick={(event) => {\n              event.preventDefault();\n              setSelectedFilter('Completed');\n              showTodos(true);\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className={classNames({\n          'clear-completed': true,\n          'clear-visibility': !completedTodos,\n        })}\n        onClick={() => clearCompleted()}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n}\n\nTodosFilter.propTypes = {\n  todosLeft: PropTypes.number.isRequired,\n  showTodos: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  completedTodos: PropTypes.bool.isRequired,\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [filterBy, setFilterBy] = useState('all');\n\n  useEffect(() => {\n    if (localStorage.getItem('list') !== null) {\n      setTodos(JSON.parse(localStorage.getItem('list')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(todos));\n  }, [todos]);\n\n  const filteredTodos = useMemo(() => todos.filter(todo => ((filterBy === 'all')\n    ? todo\n    : todo.completed === filterBy)), [filterBy, todos]);\n\n  const getTodo = (id, title, completed = false) => {\n    setTodos([...todos, {\n      id,\n      title,\n      completed,\n    }]);\n  };\n\n  const editingTodo = (id, newTitle) => {\n    setTodos(todos.map(todo => (todo.id === id\n      ? ({ ...todo, title: newTitle })\n      : ({ ...todo }))));\n  };\n\n  const changeCompleted = (id) => {\n    setTodos(todos.map(todo => ((todo.id === id)\n      ? { ...todo, completed: !todo.completed }\n      : todo)));\n  };\n\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => todo.completed === false));\n  };\n\n  const toggleCompleted = () => {\n    if (todos.length && todos.every(todo => todo.completed)) {\n      setTodos(todos.map(todo => ({ ...todo, completed: false })));\n\n      return;\n    }\n\n    setTodos(todos.map(todo => ({ ...todo, completed: true })));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos App</h1>\n\n        <TodoApp getTodo={getTodo} />\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={todos.length > 0 && todos.every(todo => todo.completed)}\n          onClick={() => toggleCompleted()}\n          readOnly\n        />\n        <label\n          htmlFor=\"toggle-all\"\n        >\n          Mark all as complete\n        </label>\n\n        <TodoList\n          todos={filteredTodos}\n          changeCompleted={changeCompleted}\n          deleteTodo={deleteTodo}\n          editingTodo={editingTodo}\n        />\n      </section>\n\n      {\n        !todos.length\n        || (\n          <TodosFilter\n            todosLeft={\n              todos\n                .filter(todo => todo.completed === false)\n                .length\n            }\n            showTodos={setFilterBy}\n            clearCompleted={clearCompleted}\n            completedTodos={todos.some(todo => todo.completed)}\n          />\n        )\n      }\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}